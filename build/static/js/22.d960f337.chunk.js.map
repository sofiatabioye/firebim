{"version":3,"sources":["views/pages/projects/Projects.js","views/pages/project/thumbnail.png"],"names":["schema","title","presence","allowEmpty","message","length","maximum","description","defaultAssetfields","Projects","useState","modal","setModal","projectModal","setProjectModal","projecti","setProject","uploadModal","setUploadModal","deleteModal","setDeleteModal","selectedOption","setSelected","datapoints","useSelector","state","assetField","assetFields","update","setUpdated","projectDatapoints","setDatapoints","dispatch","useDispatch","undefined","selectedFiles","setSelectedFiles","isValid","values","touched","errors","formState","setFormState","loggedInUser","auth","user","useEffect","validate","getProjects","map","item","label","value","id","selected","filter","includes","handleAddProject","event","a","preventDefault","console","log","formData","createProject","getCircularReplacer","seen","WeakSet","key","has","add","handleUpdateProject","data","JSON","stringify","address","updateProject","hasError","field","handleChange","persist","target","name","type","checked","files","openUploadModal","project","handleCloseEdit","handleDelete","deleteProject","projectForm","handleSubmit","editMode","className","onSubmit","row","md","htmlFor","xs","placeholder","onChange","required","color","onClick","projects","xl","role","size","show","onClose","closeButton","lg","FormData","append","uploadModel","accept","items","parse","fields","itemsPerPage","pagination","tableFilter","sorter","hover","sm","addTableClasses","scopedSlots","index","variant","model","icon","faCloudUploadAlt","replace","toLowerCase"],"mappings":"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","file":"static/js/22.d960f337.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport { useSelector, useDispatch} from 'react-redux';\nimport validate from 'validate.js';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CDataTable,\n  CCol,\n  CRow,\n  CBadge,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CValidFeedback,\n  CInvalidFeedback,\n  CInput,\n  CFormText,\n  CSpinner,\n  CModalFooter, CImg\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons'\nimport Multiselect from 'multiselect-react-dropdown';\nimport {createProject, updateProject, deleteProject, uploadModel, getProjects} from '../../../actions/projectActions';\nimport Thumbnail from \"../project/thumbnail.png\";\n\n\nconst schema = {\n  title: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n  description: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n}\nconst defaultAssetfields = [\"TIES_0101_DesPh_Category\", \n\"TIES_0105_DesPh_UniqueAssetID\", \"TIES_0111_DesPh_DesignedBy\", \"TIES_0111_DesPh_ContactNumber\", \"TIES_0115_DesPh_Status\",\n \"TIES_0116_DesPh_MaterialAndEC\",\"IES_0201_ManPh_Manufacturer\", \"TIES_0207_ManPh_ManufacturedBy\", \"TIES_0208_ManPh_ManufacturedByContactNumber\", \"TIES_0215_ManPh_WarehouseAddress\", \"TIES_0217_ManPh_StoredBy\", \"TIES_0218_ManPh_StoredByContactNumber\",\n \"TIES_0301_DelPh_DeliveryCompanyName\", \"TIES_0306_DelPh_CollectedBy\", \"TIES_0307_DelPh_CollectedByContactNumber\", \"TIES_0309_DelPh_VehicleRegistrationNumber\",\n \"TIES_0401_InsPh_ConstructionSiteName\", \"TIES_0402_InsPh_ConstructionSiteAddress\", \"TIES_0405_InsPh_CollectedBy\", \"TIES_0406_InsPh_CollectedByContactNumber\", \"TIES_0414_InsPh_CraneType\", \"TIES_0426_InsPh_InstallationDateInstalledBy\", \"TIES_0427_InsPh_InstallationDateInstalledByContactNumber\"\n];\n\nconst Projects = () => {\n  const [modal, setModal] = useState(false);\n  const [projectModal, setProjectModal] = useState(false);\n  const [projecti, setProject] = useState({});\n  const [uploadModal, setUploadModal] = useState(false);\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [selectedOption, setSelected] = useState(null);\n  const datapoints = useSelector(state => state.assetField.assetFields)\n  const [update, setUpdated] = useState(false);\n  \n  const [projectDatapoints, setDatapoints] = useState([]);\n  const dispatch = useDispatch();\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const loggedInUser = useSelector(state => state.auth.user);\n  \n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n    if(update){\n      dispatch(getProjects());\n      setUpdated(false);\n    }\n\n  }, [formState.values, update]);\n  \n  useEffect(() =>{\n   \n    if(projectDatapoints.length <= 0){\n    setDatapoints(datapoints.map((item) => {return {label: item.title, value: item.id}}))\n    }\n  }, [datapoints, projectDatapoints])\n\n  useEffect(() => {\n    let selected = datapoints.filter(item => defaultAssetfields.includes(item.title))\n    setSelected(selected);\n  }, [datapoints])\n\n\n  const handleAddProject = async(event) => {\n    event.preventDefault();\n    console.log(formState, selectedOption);\n    let formData = !!selectedOption ? {...formState.values,...{assetFields: selectedOption.map(item => item.id)}} : formState.values\n    if (formState.isValid && !!selectedOption){\n      \n      await dispatch(createProject(formData));\n    }\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n    await setModal(false);\n    setUpdated(true);\n  };\n  const getCircularReplacer = () => {\n    const seen = new WeakSet();\n    return (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) {\n          return;\n        }\n        seen.add(value);\n      }\n      return value;\n    };\n  };\n  const handleUpdateProject = async (event) => {\n    event.preventDefault();\n    if (formState.isValid){\n  \n      let data = JSON.stringify({title: formState.values.title, address: formState.values.address, description: formState.values.description}, getCircularReplacer());\n      await dispatch(updateProject(projecti.id, data));\n    }\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n    await setSelected(null);\n    await setProjectModal(false);\n    setUpdated(true);\n  };\n\n  const hasError = field =>\n    formState.touched[field] && formState.errors[field] ? true : false;\n   \n  const  handleSelected = (selected) => {\n\n      setDatapoints(projectDatapoints)\n      setSelected({ selected });\n    \n  };\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value,\n        [event.target.name]:\n             event.target.type === 'file'\n            ? setSelectedFiles(event.target.files[0])\n           : event.target.value,\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true\n      }\n    }));\n\n  };\n\n\n  const openUploadModal = (project) => {\n    setUploadModal(!uploadModal);\n    setProject(project);\n  }\n\n  const handleEdit = (project) => {\n    setProjectModal(true);\n    setProject(project);\n    setFormState({\n      isValid: true,\n      values: project,\n      touched: {},\n      errors: {}\n    });\n  }\n  const handleCloseEdit = () => {\n    setProjectModal(false);\n    setProject({});\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n  }\n\n  const openDeleteModal =(project) => {\n    setModal(false);\n    setDeleteModal(true);\n    setProject(project);\n  };\n  const handleDelete = async () => {\n   \n    if(projecti.id){\n      await dispatch(deleteProject(projecti.id));\n      await setProject({});\n      await dispatch(getProjects());\n    }\n    setDeleteModal(false);\n  \n  }\n\n  const handleUpload = (event) => {\n    event.preventDefault();\n    let formData = new FormData();\n    formData.append('sourceData', selectedFiles);\n    formData.append('title', projecti.title);\n    formData.append('projectId', projecti.id);\n    dispatch(uploadModel(formData));\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n    setUpdated(true);\n  };\n\n\n  const projectForm = (handleSubmit, editMode) => {\n    return (\n      <CForm className=\"form-horizontal\" onSubmit={handleSubmit}>\n        <CFormGroup row>\n          <CCol md=\"3\">\n            <CLabel htmlFor=\"hf-email\">Title</CLabel>\n          </CCol>\n          <CCol xs=\"12\" md=\"9\">\n            <CInput type=\"text\" id=\"title\" name=\"title\" placeholder=\"Enter Project Title\" onChange={handleChange} value={formState.values.title || ''} required />\n            <CValidFeedback>Looks good! </CValidFeedback>\n            <CInvalidFeedback> Please enter valid title </CInvalidFeedback>\n            <CFormText className=\"help-block\"> {hasError('title') ? formState.errors.title[0] : 'Please enter title'} </CFormText>\n          </CCol>\n          <CCol md=\"3\">\n            <CLabel htmlFor=\"description\">Description</CLabel>\n          </CCol>\n          <CCol xs=\"12\" md=\"9\">\n            <CInput type=\"text\" id=\"description\" name=\"description\" placeholder=\"Project Description\" onChange={handleChange} value={formState.values.description || ''} required/>\n            <CFormText className=\"help-block\">{hasError('description') ? formState.errors.description[0] : 'Please enter description'}</CFormText>\n          </CCol>\n          <CCol md=\"3\">\n            <CLabel htmlFor=\"address\">Address</CLabel>\n          </CCol>\n          <CCol xs=\"12\" md=\"9\">\n            <CInput type=\"text\" id=\"address\" name=\"address\" placeholder=\"Project Address\" onChange={handleChange} value={formState.values.address || ''} required />\n            <CFormText className=\"help-block\">{hasError('address') ? formState.errors.address[0] : 'Please enter address'}</CFormText>\n          </CCol>\n        </CFormGroup>\n        <CModalFooter>\n          <CButton className=\"text-white sidebar-dark\" type=\"submit\">Submit</CButton>{' '}\n          <CButton\n            color=\"secondary\"\n            onClick={() =>  editMode === 'edit' ? handleCloseEdit()  : setModal(false)}\n          >Cancel</CButton>\n        </CModalFooter>\n      </CForm>\n    )\n  }\n\n  const projects = useSelector(state => state.project.projects);\n\n  // const showProjects = projects && projects.length > 0 ? projects.map((project) => (\n  //   <CCol col=\"6\" sm=\"12\" md=\"6\" key={project.title}>\n  //     <CCard className=\"project-card info shadow-sm mb-5 bg-white rounded\">\n  //       <CCardBody className=\"p-0\" >\n  //         <CRow>\n  //           <CCol sm=\"12\" md=\"6\">\n  //             <CImg\n  //               src={Thumbnail}\n  //               align=\"center\"\n  //               fluid\n  //               heigh=\"100%\"\n  //               className=\"mx-auto my-auto w-100 h-100\"\n  //             />\n  //           </CCol>\n  //           <CCol sm=\"12\" md=\"6\" >\n  //             <div className=\"d-flex align-items-lg-stretch justify-content-end flex-column pt-3 px-3\">\n  //             <div className=\"text-uppercase font-weight-bold text-lg-left text-sm-left\">{project.title}</div>\n  //             <div className=\"py-3\"><CIcon name=\"cil-notes\" /> <span className=\"text-muted \">{project.description}</span></div>\n  //             <div><CIcon name=\"cil-map\" /> <span className=\"text-muted \">{project.address}</span></div>\n  //               <div className=\"pt-3\">{project.assetFields && project.assetFields.length > 0 ?\n  //                   <CBadge color=\"success\" className=\"mr-2\">{project.assetFields.length} Datapoints</CBadge> : null }</div>\n  //               <div className=\"pt-3\">\n  //                 {loggedInUser && loggedInUser.role === 'admin' ? <span><CButton color=\"primary\" className=\"\" variant=\"ghost\" onClick={() => handleEdit(project)}><CIcon name=\"cil-pencil\" /></CButton>\n  //                  <CButton color=\"danger\" variant=\"ghost\" onClick={() => openDeleteModal(project)}><CIcon name=\"cil-trash\" /></CButton></span> : null}\n  //               { loggedInUser && loggedInUser.role === 'admin' && project.model === null ?  <CButton className=\"\" color=\"info\" variant=\"ghost\" onClick={() => openUploadModal(project)}><FontAwesomeIcon icon={faCloudUploadAlt}/> Upload Model</CButton> : null}\n  //               { loggedInUser && loggedInUser.role !== 'admin' && project.model === null ?  <CBadge color=\"danger\">No model!</CBadge> : null}\n  //               </div>\n  //           </div>\n  //           </CCol>\n  //         </CRow>\n\n  //       </CCardBody>\n\n  //     </CCard>\n\n  //   </CCol>\n\n  // )): <CSpinner />;\n\n\n\n\n\n  return (\n    <>\n\n      <CRow>\n        <CCol xs=\"12\" xl=\"12\" className=\"my-4 border-bottom mb-5\">\n          {loggedInUser && loggedInUser.role === 'admin'? <CButton className=\"float-right sidebar-dark\" color=\"primary\" size=\"lg\" onClick={()=> setModal(true)}>\n            Add New Project\n          </CButton> : null }\n          <h1>Projects</h1>\n          <CModal\n            show={modal}\n            onClose={setModal}\n          >\n            <CModalHeader closeButton>\n              <CModalTitle>New Project</CModalTitle>\n            </CModalHeader>\n            <CModalBody>\n              {projectForm(handleAddProject, \"add\")}\n            </CModalBody>\n\n          </CModal>\n        </CCol>\n\n        <CCol xs=\"12\" lg=\"12\">\n            <CModal\n              show={projectModal}\n              onClose={handleCloseEdit}\n            >\n              <CModalHeader closeButton>\n                <CModalTitle className=\"text-lg-center\">{projecti.title}</CModalTitle>\n              </CModalHeader>\n              <CModalBody>\n                {projectForm(handleUpdateProject, \"edit\")}\n              </CModalBody>\n            </CModal>\n\n            <CModal\n            show={deleteModal}\n            onClose={setDeleteModal}\n             >\n            <CModalHeader closeButton> Confirm</CModalHeader>\n            <CModalBody>Are you sure you want to delete this project? </CModalBody>\n            <CModalFooter>\n              <CButton className=\"text-white bg-danger\" type=\"submit\" onClick={handleDelete}>Yes</CButton>{' '}\n              <CButton\n                color=\"secondary\"\n                onClick={() =>  setDeleteModal(false)}\n              >Cancel</CButton>\n            </CModalFooter>\n          </CModal>\n          <CModal  show={uploadModal}\n                   onClose={openUploadModal}>\n            <CModalHeader closeButton> Upload Model</CModalHeader>\n            <CForm onSubmit={handleUpload}>\n            <CModalBody>\n              {/* <CFormGroup>\n                <CInput type=\"text\" id=\"title\" name=\"title\" placeholder=\"Enter Model Name\" onChange={handleChange} value={formState.values.title || ''} required />\n              </CFormGroup> */}\n                <CFormGroup>\n                  <input type=\"file\" name=\"model\" id=\"model\" accept=\".ifc\" onChange={handleChange} required />\n                </CFormGroup>\n            </CModalBody>\n            <CModalFooter>\n              <CButton className=\"text-white bg-info\" type=\"submit\">Submit</CButton>{' '}\n              <CButton\n                color=\"secondary\"\n                onClick={() =>  setUploadModal(false)}\n              >Cancel</CButton>\n            </CModalFooter>\n            </CForm>\n          </CModal>\n\n            <CRow>\n             <CCard className=\"card-accent-dark shadow-lg\" size=\"lg\">\n               <CCardBody>\n            {projects && projects.length > 0 ?\n              ( <CDataTable\n                items={JSON.parse(JSON.stringify(projects, getCircularReplacer()))}\n                fields={['title', 'description', 'address', 'datapoints', 'actions']}\n                itemsPerPage={20}\n                pagination\n                tableFilter\n                sorter\n                hover\n                sm\n                addTableClasses={\"assetsTable\"}\n                scopedSlots = {{\n                  'actions':\n                    (item, index)=>{\n                      return (\n                        <td className=\"py-2\">\n                          {/* <CButton className=\"pl-6\" color=\"info\" variant=\"ghost\" onClick={() => openModal(item)}><CIcon name=\"cil-notes\" customClasses=\"c-sidebar-nav-icon\"/></CButton>\n                          <CButton className=\"pl-6 px-3\" color=\"primary\" variant=\"ghost\" onClick={() => openEditModal(item)}><CIcon name=\"cil-pencil\" color=\"info\" customClasses=\"c-sidebar-nav-icon\" /></CButton> */}\n                          {loggedInUser && loggedInUser.role === 'admin' ? <span><CButton color=\"primary\" className=\"\" variant=\"ghost\" onClick={() => handleEdit(item)}><CIcon name=\"cil-pencil\" /></CButton>\n                   <CButton color=\"danger\" variant=\"ghost\" onClick={() => openDeleteModal(item)}><CIcon name=\"cil-trash\" /></CButton></span> : null}\n                  { loggedInUser && loggedInUser.role === 'admin' && item.model === null ?  <CButton className=\"\" color=\"info\" variant=\"ghost\" onClick={() => openUploadModal(item)}><FontAwesomeIcon icon={faCloudUploadAlt}/> Upload Model</CButton> : null}\n                  { loggedInUser && loggedInUser.role !== 'admin' && item.model === null ?  <CBadge color=\"danger\">No model!</CBadge> : null}\n                        </td>\n                      )\n                    },\n                  'datapoints':\n                    (item, index)=> {\n                      return (\n                        <td>{item.assetFields ? item.assetFields.length: 0}</td>\n                      )\n                    },\n                    'status':\n                    (item, index) => {\n                      return (\n                        <td><span className={item['TIES_0116_DesPh_Status'].replace(/\\s/g, \"\").toLowerCase()}></span>{item['TIES_0116_DesPh_Status']}</td>\n                      )\n                    }\n\n                }}\n                />):<CSpinner />}\n            {/* {showProjects} */}\n            </CCardBody>\n            </CCard>\n            </CRow>\n\n        </CCol>\n      </CRow>\n\n\n\n\n    </>\n  )\n}\n\nexport default Projects\n","export default __webpack_public_path__ + \"static/media/thumbnail.c6ad974b.png\";"],"sourceRoot":""}