{"version":3,"sources":["views/pages/projectDatapoints/projectDatapoint.js"],"names":["ProjectDataPoint","props","dispatch","useDispatch","datapoints","useSelector","state","assetField","assetFields","assetCategory","assetCategories","useState","project","setProject","projects","selectedOption","setSelected","modal","setModal","deleteModal","setDeleteModal","projectDatapoint","setProjectDatapoint","update","setUpdate","filter","setFilter","itemsPerPage","setItemsPerPage","loggedInUser","auth","user","useEffect","length","find","item","id","Number","match","params","projectId","Object","keys","filterSet","map","field","includes","value","title","key","cat","category","handleUpdateProject","event","type","a","preventDefault","updateProject","fields","selected","concat","getProjects","xs","lg","className","role","options","placeholder","onSelect","showCheckbox","selectedValues","closeOnSelect","displayValue","variant","active","onClick","disabled","onChange","e","target","name","show","onClose","closeButton","onSubmit","color","items","pagination","tableFilter","sorter","hover","scopedSlots","style","width","openDeleteModal","customClasses"],"mappings":"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","file":"static/js/34.b1e9c762.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CForm,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from '@coreui/react'\nimport Multiselect from 'multiselect-react-dropdown';\nimport CIcon from \"@coreui/icons-react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { updateProject, getProjects } from '../../../actions/projectActions';\n\n\n\n\nconst ProjectDataPoint = (props) => {\n\n  const dispatch = useDispatch();\n  const datapoints = useSelector(state => state.assetField.assetFields);\n  const categories = useSelector(state => state.assetCategory.assetCategories);\n  const [project, setProject] = useState({});\n  const projects = useSelector(state => state.project.projects)\n  const [selectedOption, setSelected] = useState(null);\n  const [modal, setModal] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [projectDatapoint, setProjectDatapoint] = useState({});\n  const [update, setUpdate] = useState(false);\n  const [filter, setFilter] = useState([]);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n\n  const loggedInUser = useSelector(state => state.auth.user);\n  const fields = ['title', 'category', 'type'];\n  const adminFields = ['title', 'category', 'type', 'actions'];\n  \n  useEffect(() => {\n    \n    let project = projects && projects.length > 0 ? projects.find(item =>  item.id === Number(props.match.params.projectId)) : null;\n    setProject(project);\n    setUpdate(true);\n  }, [projects, props.match.params.projectId]);\n\n  useEffect(() => {\n    if(Object.keys(project).length>0 && project.assetFields && project.assetFields.length >0 ){\n      let filterSet = datapoints.filter((item) => !project.assetFields.map((field) => field.id).includes(item.id)).map((item) => {return {value: item.title, key: item.id, cat: item.category}})\n      setFilter(filterSet);\n    }\n  }, [update, project, datapoints]);\n\n\n  const  handleSelected = (selected) => {\n    setSelected({ selected });\n  };\n  const handleNumChange = (e) => {\n    setItemsPerPage(Number(e.target.value));\n  }\n  const handleUpdateProject = async (event, type) => {\n    event.preventDefault();\n  \n    if(!!type && type ===\"remove\" && Object.keys(projectDatapoint).length > 0 && project.assetFields){\n      let update =  project.assetFields.filter((item) => item.id !== projectDatapoint.id).map((item) => item.id);\n      await dispatch(updateProject(project.id, {title: project.title, assetFields: update}))\n      setDeleteModal(false);\n      setProjectDatapoint({});\n      setSelected(null);\n    }\n    if (!!selectedOption){\n      let fields = selectedOption.selected.map(item => item.key);\n      let update = project.assetFields && project.assetFields.length > 0 ? project.assetFields.map((item) => item.id).concat(fields) : fields;\n      await dispatch(updateProject(project.id, {title: project.title, assetFields: update}));\n      setSelected(null);\n    }\n    await setModal(false);\n    await dispatch(getProjects());\n    await setSelected(null);\n  \n  };\n\n  const openDeleteModal =(item) => {\n    setDeleteModal(true);\n    setProjectDatapoint(item);\n  }\n  const closeDeleteModal =() => {\n    setDeleteModal(false);\n    setProjectDatapoint({});\n  }\n\n  const dataForm = () => {\n    return ( <CForm className=\"form-horizontal\" onSubmit={handleUpdateProject}>\n      <CModalBody>\n        Are you sure you want to add these data points? \n      </CModalBody>\n      <CModalFooter>\n        <CButton  className=\"sidebar-dark text-white\" type=\"submit\">Submit</CButton>{' '}\n        <CButton\n          color=\"secondary\"\n          onClick={() =>  setModal(false)}\n        >Cancel</CButton>\n      </CModalFooter>\n    </CForm>)\n  }\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard className=\"shadow-lg\">\n            <CCardHeader>\n             <h4 className=\"pt-3 float-left\"> {project ? project.title: null} Datapoints</h4>\n              {loggedInUser && loggedInUser.role === 'admin' && project ? \n             \n               <span className=\"flex justify-end mr-20 multiSelectWrapper\">\n                <Multiselect\n                    options={filter && filter.length > 0 ? filter : datapoints.map((item) => {return {value: item.title, key: item.id, cat: item.category}})}\n                    placeholder={\"Select Asset fields\"}\n                    onSelect={handleSelected} // Function will trigger on select event\n                    showCheckbox={true}\n                    selectedValues={selectedOption}\n                    closeOnSelect={false}\n                    displayValue=\"value\" // Property name to display in the dropdown options\n                   \n                     /> \n                <CButton variant=\"outline\" active aria-pressed=\"true\" className=\"float-right sidebar-dark text-white\" onClick={() => setModal(!modal)} disabled={!!selectedOption ? false: true}>\n                  <i className=\"fa fa-add\"></i> Add\n                </CButton>\n                <span className=\"pl-4 pt-2\">\n                  <i className=\"fa fa-sliders-h\"></i>\n                  <select aria-label=\"Select items per page\" onChange={handleNumChange} name=\"itemsPerPage\" value={itemsPerPage}>\n                    <option value=\"10\">10</option>\n                    <option value=\"25\">25</option>\n                    <option value=\"50\">50</option>\n                  </select>\n                </span>\n                </span>\n                \n                : null}\n                 \n            </CCardHeader>\n\n\n            <CModal\n              show={modal}\n              onClose={setModal}\n            >\n              <CModalHeader closeButton>\n                <CModalTitle>Add New Datapoint</CModalTitle>\n              </CModalHeader>\n                {dataForm()}\n            </CModal>\n\n\n            <CCardBody>\n              {project ?\n                (<CDataTable\n                items={project.assetFields}\n                fields={loggedInUser && loggedInUser.role === 'admin' ? adminFields: fields}\n                itemsPerPage={itemsPerPage}\n                pagination\n                tableFilter\n                sorter\n                hover\n                scopedSlots = {{\n                  'actions':\n                    (item)=>(\n                     <td className=\"px-4\" style={{width: '5%'}}>\n                        <CButton className=\"pl-6\" color=\"danger\" variant=\"ghost\" onClick={() => openDeleteModal(item)}><CIcon name=\"cil-x\" customClasses=\"c-sidebar-nav-icon\"/></CButton>\n                      </td>\n                    )\n                }}\n              />) : <div>Loading..</div>}\n            </CCardBody>\n            <CModal\n              show={deleteModal}\n              onClose={setDeleteModal}\n            >\n              <CModalHeader closeButton> Confirm</CModalHeader>\n              <CModalBody>\n                <h6>Are you sure you want to remove this data point [{projectDatapoint.title}]? </h6>\n              </CModalBody>\n              <CModalFooter>\n                <CButton className=\"text-white bg-danger\" type=\"submit\" onClick={(e) => handleUpdateProject(e, \"remove\")}>Yes</CButton>{' '}\n                <CButton\n                  color=\"secondary\"\n                  onClick={() => closeDeleteModal()}\n                >Cancel</CButton>\n              </CModalFooter>\n            </CModal>\n\n          \n          </CCard>\n        </CCol>\n\n      </CRow>\n\n\n    </>\n  )\n}\n\nexport default ProjectDataPoint;\n"],"sourceRoot":""}