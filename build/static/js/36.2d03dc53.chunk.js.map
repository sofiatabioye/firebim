{"version":3,"sources":["views/pages/users/userData.js","views/pages/users/Users.js"],"names":["assetData","id","name","email","role","project","schema","presence","allowEmpty","message","length","maximum","projectId","fields","Users","dispatch","useDispatch","useState","modal","setModal","edit","setEdit","deleteModal","setDeleteModal","user","setUser","isValid","values","touched","errors","formState","setFormState","projects","useSelector","state","users","userData","useEffect","validate","handleChange","event","persist","target","type","checked","value","xs","lg","className","variant","active","onClick","show","onClose","closeButton","onSubmit","preventDefault","updateUser","inviteUser","row","md","htmlFor","placeholder","onChange","required","custom","map","title","color","items","itemsPerPage","pagination","tableFilter","sorter","hover","scopedSlots","item","field","customClasses","deleteUser"],"mappings":"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","file":"static/js/36.2d03dc53.chunk.js","sourcesContent":["const assetData = [\n  {id: 0, name: 'Tunde Bills', email: 'ab@gmail.com', role: 'designer', project: 'Project A'},\n  {id: 1, name: 'VB Agra', email: 'vb@gmail.com', role: 'manufacturer', project: 'Project B'},\n  {id: 2, name: 'Samantha Alias', email: 'sa@gmail.com', role: 'installation', project: 'Project A'},\n  {id: 3, name: 'Vrio Ible', email: 'vi@gmail.com', role: 'delivery', project: 'Project B'},\n]\n\nexport default assetData\n","import React, {useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CForm,\n  CFormGroup,\n  CFormText,\n  CInput,\n  CLabel,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow, CSelect\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport userData from './userData';\nimport validate from \"validate.js\";\nimport {inviteUser, deleteUser, updateUser} from \"../../../actions/authActions\";\n\n\nconst getBadge = status => {\n  switch (status) {\n    case 'Active': return 'success'\n    case 'Inactive': return 'secondary'\n    case 'Pending': return 'warning'\n    case 'Banned': return 'danger'\n    default: return 'primary'\n  }\n};\nconst schema = {\n  name: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n  role: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n  email: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n  projectId: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n}\n\n\nconst fields = ['name', 'email', 'actions'];\n\nconst Users = () => {\n  const dispatch = useDispatch();\n  const [modal, setModal] = useState(false);\n  const [edit, setEdit] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [user, setUser] = useState({});\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n\n  const projects = useSelector(state => state.project.projects);\n  // const users = useSelector(state => state.user.users);\n  const users = userData;\n\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n    // console.log(event);\n    setFormState(formState => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value,\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true\n      }\n    }));\n  }\n\n  const hasError = field =>\n    formState.touched[field] && formState.errors[field] ? true : false;\n\n  const handleInvite = event => {\n    event.preventDefault();\n    if (formState.isValid){\n      dispatch(inviteUser(formState.values));\n    }\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n    setModal(false);\n    return false;\n  };\n\n\n  const handleDeleteField = (event) => {\n    event.preventDefault();\n    dispatch(deleteUser(user.id));\n    setUser({});\n    setDeleteModal(false);\n  }\n  const handleUpdateUser = (event) => {\n    event.preventDefault();\n    dispatch(updateUser({name: formState.values.name, role: formState.values.role}, user.id));\n    setUser({});\n    setModal(false);\n  }\n  const openDeleteModal =(field) => {\n    setDeleteModal(true);\n    setUser(field);\n  }\n\n  const openEditModal =(field) => {\n    setEdit(true);\n    setModal(true);\n    setFormState({\n      isValid: true,\n      values: field,\n      touched: {},\n      errors: {}\n    });\n    setUser(field);\n  }\n  const handleCloseEdit = () => {\n    setModal(false);\n    setEdit(false);\n    setFormState({\n      isValid: true,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n  }\n\n  return (\n    <>\n\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard className=\"shadow-lg\">\n            <CCardHeader>\n              User\n              <CButton variant=\"outline\" active aria-pressed=\"true\" className=\"float-right sidebar-dark text-white\" onClick={() => setModal(!modal)} >\n                 Invite User\n              </CButton>\n\n            </CCardHeader>\n            <CModal\n              show={modal}\n              onClose={setModal}\n            >\n              <CModalHeader closeButton>\n                <CModalTitle>{edit ? \"Update User\":  \"Invite New User\" }</CModalTitle>\n              </CModalHeader>\n              <CForm className=\"form-horizontal\" onSubmit={edit? handleUpdateUser :handleInvite }>\n              <CModalBody>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"name\">Name</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      <CInput type=\"text\" id=\"name\" name=\"name\" placeholder=\"Enter User Name...\" onChange={handleChange} value={formState.values.name || ''} required />\n                      <CFormText className=\"help-block\">Please enter your username</CFormText>\n                    </CCol>\n                  </CFormGroup>\n                {edit ? null : <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"email\">Email Address</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      <CInput type=\"text\" id=\"email\" name=\"email\" placeholder=\"Enter Email...\" onChange={handleChange} value={formState.values.email || ''} required />\n                      <CFormText className=\"help-block\">Please enter your email</CFormText>\n                    </CCol>\n                  </CFormGroup> }\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"role\">Access Role</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      <CSelect\n                        custom\n                        name=\"role\"\n                        id=\"role\"\n                        onChange={handleChange}\n                        value={formState.values.role || ''}\n                        required\n                      >\n                        <option value=\"\">Please select</option>\n                        <option value=\"design\">Designer</option>\n                        <option value=\"manufacture\">Manufacturer</option>\n                        <option value=\"installation\">Installation</option>\n                        <option value=\"delivery\">Delivery</option>\n                        <option value=\"admin\">Admin</option>\n                      </CSelect>\n                      <CFormText className=\"help-block\">Select access roles</CFormText>\n                    </CCol>\n                  </CFormGroup>\n                {edit? null : <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"role\">Project</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect\n                      custom\n                      name=\"projectId\"\n                      id=\"projectId\"\n                      onChange={handleChange}\n                      value={formState.values.projectId || ''}\n                      required\n                    >\n                      <option value=\"\">Please select</option>\n                      {projects && projects.length > 0 ? projects.map(project => (\n                        <option value={project.id} key={project.id}>{project.title}</option>)) : null\n                      }\n                    </CSelect>\n                    <CFormText className=\"help-block\">Select access roles</CFormText>\n                  </CCol>\n                </CFormGroup> }\n              </CModalBody>\n              <CModalFooter>\n                <CButton className=\"text-white sidebar-dark\" type=\"submit\">Submit</CButton>{' '}\n                <CButton\n                  color=\"secondary\"\n                  onClick={() =>  handleCloseEdit()}\n                >Cancel</CButton>\n              </CModalFooter>\n            </CForm>\n            </CModal>\n            <CCardBody>\n              <CDataTable\n                items={users}\n                fields={fields}\n                itemsPerPage={10}\n                pagination\n                tableFilter\n                sorter\n                hover\n                scopedSlots = {{\n                  'actions':\n                    (item)=>(\n                      <td className=\"px-4\">\n                        <CButton className=\"pl-6 px-3\" color=\"primary\" variant=\"ghost\" onClick={() => openEditModal(item)}><CIcon name=\"cil-pencil\" color=\"info\" customClasses=\"c-sidebar-nav-icon\" /></CButton>\n                        <CButton className=\"pl-6\" color=\"danger\" variant=\"ghost\" onClick={() => openDeleteModal(item)}><CIcon name=\"cil-trash\" customClasses=\"c-sidebar-nav-icon\"/></CButton>\n                      </td>\n                    )\n\n                }}\n              />\n            </CCardBody>\n          </CCard>\n          <CModal\n            show={deleteModal}\n            onClose={setDeleteModal}\n          >\n            <CModalHeader closeButton> Confirm</CModalHeader>\n            <CModalBody>Are you sure you want to delete this user? </CModalBody>\n            <CModalFooter>\n              <CButton className=\"text-white bg-danger\" type=\"submit\" onClick={handleDeleteField}>Yes</CButton>{' '}\n              <CButton\n                color=\"secondary\"\n                onClick={() =>  setDeleteModal(false)}\n              >Cancel</CButton>\n            </CModalFooter>\n          </CModal>\n\n        </CCol>\n\n      </CRow>\n\n\n    </>\n  )\n}\n\nexport default Users\n"],"sourceRoot":""}