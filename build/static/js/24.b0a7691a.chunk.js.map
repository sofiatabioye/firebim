{"version":3,"sources":["views/pages/assetCategory/AssetCategory.js"],"names":["schema","title","presence","allowEmpty","message","length","maximum","role","AssetCategory","dispatch","useDispatch","useState","modal","setModal","editModal","setEditModal","deleteModal","setDeleteModal","category","setCategory","isValid","values","touched","errors","formState","setFormState","categories","useSelector","state","assetCategory","assetCategories","loggedInUser","auth","user","useEffect","validate","hasError","field","handleChange","event","persist","target","name","type","checked","value","handleEditCategory","preventDefault","updateAssetCategory","id","xs","lg","className","variant","active","onClick","show","onClose","closeButton","onSubmit","createAssetCategory","row","md","htmlFor","placeholder","onChange","required","custom","autoComplete","color","items","fields","itemsPerPage","pagination","tableFilter","sorter","hover","scopedSlots","item","openEditModal","customClasses","openDeleteModal","deleteAssetCategory"],"mappings":"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","file":"static/js/24.b0a7691a.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CForm,\n  CFormGroup,\n  CFormText,\n  CInput,\n  CLabel,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow, CSelect\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react';\nimport assetData from './assetCategoryData';\nimport {createAssetCategory, deleteAssetCategory, updateAssetCategory} from \"../../../actions/assetActions\";\nimport validate from \"validate.js\";\n\n\nconst getBadge = status => {\n  switch (status) {\n    case 'Active': return 'success'\n    case 'Inactive': return 'secondary'\n    case 'Pending': return 'warning'\n    case 'Banned': return 'danger'\n    default: return 'primary'\n  }\n};\nconst schema = {\n  title: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n  role: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n}\n\n\n\nconst AssetCategory = () => {\n  const dispatch = useDispatch();\n  const [modal, setModal] = useState(false);\n  const [editModal, setEditModal] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [category, setCategory] = useState({});\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n\n  const categories = useSelector(state => state.assetCategory.assetCategories);\n  const loggedInUser = useSelector(state => state.auth.user);\n  let fields =  [ 'title', 'role','AssetFieldCount'];\n  let adminfields = [ 'title', 'role','AssetFieldCount',  'actions'];\n\n\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const hasError = field =>\n    formState.touched[field] && formState.errors[field] ? true : false;\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value,\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true\n      }\n    }));\n\n  };\n\n  const handleAddCategory = event => {\n    event.preventDefault();\n    if (formState.isValid){\n      dispatch(createAssetCategory(formState.values));\n    }\n      setFormState({\n        isValid: false,\n        values: {},\n        touched: {},\n        errors: {}\n      });\n      setModal(false);\n      return false;\n  }\n  const handleDeleteCategory = () => {\n      // event.preventDefault();\n      dispatch(deleteAssetCategory(category.id));\n      setCategory({});\n      setDeleteModal(false);\n  }\n\n  const handleEditCategory = event => {\n    event.preventDefault();\n    dispatch(updateAssetCategory(category.id, formState.values));\n    setCategory({});\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n    setEditModal(false);\n  }\n\n  const openDeleteModal =(category) => {\n    setDeleteModal(true);\n    setCategory(category);\n  }\n\n  const openEditModal =(category) => {\n    setEditModal(true);\n    setFormState({\n      isValid: true,\n      values: category,\n      touched: {},\n      errors: {}\n    });\n    setCategory(category);\n  }\n\n  return (\n    <>\n\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard className=\"shadow-lg\">\n            <CCardHeader>\n              Asset Data Categories\n              {loggedInUser && loggedInUser.role === 'admin' ? <CButton variant=\"outline\" active aria-pressed=\"true\" className=\"float-right sidebar-dark text-white\" onClick={() => setModal(!modal)} >\n                  Add New Category\n                </CButton> : null }\n\n            </CCardHeader>\n            <CModal\n              show={modal}\n              onClose={setModal}\n            >\n              <CModalHeader closeButton>\n                <CModalTitle>New Category</CModalTitle>\n              </CModalHeader>\n              <CForm className=\"form-horizontal\" onSubmit={handleAddCategory}>\n              <CModalBody>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"hf-email\">Title</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      <CInput type=\"text\" id=\"title\" name=\"title\" placeholder=\"Enter Category...\" onChange={handleChange} value={formState.values.title || ''} required />\n                      <CFormText className=\"help-block\"> {hasError('title') ? formState.errors.title[0] : \"Please enter your category\"} </CFormText>\n                    </CCol>\n                  </CFormGroup>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"hf-password\">Access Role</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                        <CSelect\n                          custom\n                          name=\"role\"\n                          id=\"role\"\n                          autoComplete=\"name\"\n                          onChange={handleChange}\n                          value={formState.values.role || ''}\n                          required\n                        >\n                          <option value=\"\">Please select </option>\n                          <option value=\"design\">Design</option>\n                          <option value=\"manufacture\">Manufacture</option>\n                          <option value=\"delivery\">Delivery</option>\n                          <option value=\"installation\">Installation</option>\n\n                        </CSelect>\n                       <CFormText className=\"help-block\"> {hasError('role') ? formState.errors.role[0] : \"Select access roles\"} </CFormText>\n                    </CCol>\n                  </CFormGroup>\n\n              </CModalBody>\n              <CModalFooter>\n                <CButton className=\"text-white sidebar-dark\" type=\"submit\">Submit</CButton>{' '}\n                <CButton\n                  color=\"secondary\"\n                  onClick={() =>  setModal(false)}\n                >Cancel</CButton>\n              </CModalFooter>\n              </CForm>\n            </CModal>\n            <CCardBody>\n              {categories ?\n                <CDataTable\n                items={categories}\n                fields={loggedInUser && loggedInUser.role === 'admin' ? adminfields : fields}\n                itemsPerPage={10}\n                pagination\n                tableFilter\n                sorter\n                hover\n                scopedSlots =\n                  {{\n                  'actions':\n                    (item)=>(\n                      <td className=\"px-4\">\n                        <CButton className=\"pl-6\" onClick={() => openEditModal(item)} color=\"primary\" variant=\"ghost\"><CIcon name=\"cil-pencil\" color=\"primary\" customClasses=\"c-sidebar-nav-icon\" /></CButton>\n                        <CButton className=\"pl-6\"  onClick={() => openDeleteModal(item)} color=\"danger\" variant=\"ghost\"><CIcon name=\"cil-trash\" customClasses=\"c-sidebar-nav-icon\"/></CButton>\n                      </td>\n                    )\n                }}\n                /> : <div>Loading ...</div>}\n            </CCardBody>\n            <CModal\n              show={deleteModal}\n              onClose={setDeleteModal}\n            >\n              <CModalHeader closeButton> Confirm</CModalHeader>\n                <CModalBody>Are you sure you want to delete this asset category? </CModalBody>\n                <CModalFooter>\n                  <CButton className=\"text-white bg-danger\" type=\"submit\" onClick={()=> handleDeleteCategory()}>Yes</CButton>{' '}\n                  <CButton\n                    color=\"secondary\"\n                    onClick={() =>  setDeleteModal(false)}\n                  >Cancel</CButton>\n                </CModalFooter>\n            </CModal>\n            <CModal\n              show={editModal}\n              onClose={setEditModal}\n            >\n              <CModalHeader closeButton> Confirm</CModalHeader>\n              <CForm className=\"form-horizontal\" onSubmit={handleEditCategory}>\n                <CModalBody>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"hf-email\">Title</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      <CInput type=\"text\" id=\"title\" name=\"title\" placeholder=\"Enter Category...\" onChange={handleChange} value={formState.values.title || ''} required />\n                      <CFormText className=\"help-block\"> {hasError('title') ? formState.errors.title[0] : \"Please enter your category\"} </CFormText>\n                    </CCol>\n                  </CFormGroup>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"hf-password\">Access Role</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      <CSelect\n                        custom\n                        name=\"role\"\n                        id=\"role\"\n                        autoComplete=\"name\"\n                        onChange={handleChange}\n                        value={formState.values.role || ''}\n                        required\n                      >\n                        <option value=\"\">Please select </option>\n                        <option value=\"design\">Design</option>\n                        <option value=\"manufacture\">Manufacture</option>\n                        <option value=\"delivery\">Delivery</option>\n                        <option value=\"installation\">Installation</option>\n\n                      </CSelect>\n                      <CFormText className=\"help-block\"> {hasError('role') ? formState.errors.role[0] : \"Select access roles\"} </CFormText>\n                    </CCol>\n                  </CFormGroup>\n                </CModalBody>\n              <CModalFooter>\n                <CButton className=\"text-white bg-info\" type=\"submit\" onClick={()=> handleEditCategory()}>Submit</CButton>{' '}\n                <CButton\n                  color=\"secondary\"\n                  onClick={() =>  setEditModal(false)}\n                >Cancel</CButton>\n              </CModalFooter></CForm>\n            </CModal>\n          </CCard>\n        </CCol>\n\n      </CRow>\n\n\n    </>\n  )\n}\n\nexport default AssetCategory\n"],"sourceRoot":""}