{"version":3,"sources":["views/pages/Dashboard/dashboard.js"],"names":["dateCheck","date","category","isNaN","Date","parse","date1","dateDiff","getTime","formatChartData","assets","preManufactured","manufactured","inStorage","inTransit","installedOnsite","offloadedOnsite","dateDataset","dueSoon","pastDueDate","inTime","Array","isArray","length","map","item","result","resulta","resultb","resultc","resulte","resultd","na","Dashboard","props","dispatch","useDispatch","useState","modelId","projecti","setProject","setProjectsWithModels","setAssets","projects","useHistory","useSelector","state","assetCategory","assetCategories","project","assetField","assetFields","auth","user","users","title","Object","values","useEffect","a","projectsWithModel","filter","model","getmodelProject","find","proj","getModelAssetsData","id","assetsData","data","parseInt"],"mappings":"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","file":"static/js/23.0d2f59f0.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CSelect,\n  CRow,\n  CDataTable, CSpinner,\n  CBadge\n} from '@coreui/react'\nimport { Bar} from 'react-chartjs-2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBuilding, faTh, faThList, faUsers } from \"@fortawesome/free-solid-svg-icons\";\nimport {getModelAssetsData} from \"../../../actions/authActions\";\n\n\nfunction dateCheck(date, category) {\n\n   if( !!date && date !== \"N/A\" && !isNaN(Date.parse(date))){\n    //  let dateDiff = moment().diff(date, 'days');  // breaks in production\n    var date1 = new Date();\n    var date2 = new Date(date);\n\n      // To calculate the time difference of two dates\n    var Difference_In_Time = date2.getTime() - date1.getTime();\n\n      // To calculate the no. of days between two dates\n    let dateDiff = Difference_In_Time / (1000 * 3600 * 24);\n\n    if(dateDiff > 0) {\n      return [\"pastDueDate\", category]\n    } else if(dateDiff < 0 && dateDiff >= -7){\n      return [\"dueSoon\", category];\n    }\n    else {\n      return [\"inTime\", category];\n    }\n  }\n}\nconst formatChartData =  (assets) => {\n  let preManufactured  = 0;\n  let manufactured=0;\n  let inStorage = 0;\n  let inTransit = 0;\n  let installedOnsite = 0;\n  let offloadedOnsite = 0;\n  let na = 0;\n  let dueSoon = [];\n  let inTime = [];\n  let pastDueDate = [];\n\n  let dateDataset = {\n    \"Pre-manufactured\": {\n      dueSoon: 0,\n      pastDueDate: 0,\n      inTime: 0\n    },\n    \"Manufactured\": {\n      dueSoon: 0,\n      pastDueDate: 0,\n      inTime: 0\n    },\n    \"In storage\": {\n      dueSoon: 0,\n      pastDueDate: 0,\n      inTime: 0\n    },\n    \"In transit\": {\n      dueSoon: 0,\n      pastDueDate: 0,\n      inTime: 0\n    },\n    \"Offloaded onsite\": {\n      dueSoon: 0,\n      pastDueDate: 0,\n      inTime: 0\n    },\n    \"Installed onsite\": {\n      dueSoon: 0,\n      pastDueDate: 0,\n      inTime: 0\n    }\n  }\n\n  Array.isArray(assets) && assets.length > 0 && assets.map(item => {\n\n    switch (item[\"TIES_0116_DesPh_Status\"]) {\n      case \"Pre-manufactured\":\n        let result = dateCheck(item[\"TIES_0113_DesPh_PlannedManufacturingDate\"], item[\"TIES_0116_DesPh_Status\"]);\n        if(result) dateDataset[result[1]][result[0]]++ ;\n        preManufactured++;\n        break;\n      case \"Manufactured\":\n        let resulta = dateCheck(item[\"TIES_0206_ManPh_ManufacturingDate\"], item[\"TIES_0116_DesPh_Status\"]);\n        if(resulta)  dateDataset[resulta[1]][resulta[0]]++\n        manufactured++;\n        break;\n      case \"In storage\":\n        let resultb = dateCheck(item[\"TIES_0228_ManPh_StorageDate\"], item[\"TIES_0116_DesPh_Status\"]);\n        if (resultb) dateDataset[resultb[1]][resultb[0]]++;\n        inStorage++;\n        break;\n      case \"In transit\":\n        let resultc = dateCheck(item[\"TIES_0304_DelPh_CollectionDate\"], item[\"TIES_0116_DesPh_Status\"]);\n        if(resultc) dateDataset[resultc[1]][resultc[0]]++;\n        inTransit++;\n        break;\n      case \"Offloaded onsite\":\n        let resulte = dateCheck(item[\"TIES_0403_InsPh_OnsiteDeliveryDate\"], item[\"TIES_0116_DesPh_Status\"]);\n        if(resulte) dateDataset[resulte[1]][resulte[0]]++;\n        offloadedOnsite++;\n        break;\n      case \"Installed onsite\":\n        let resultd = dateCheck(item[\"TIES_0425_InsPh_InstallationDate\"], item[\"TIES_0116_DesPh_Status\"]);\n        if(resultd) dateDataset[resultd[1]][resultd[0]]++;\n        installedOnsite++;\n        break;\n     \n      default:\n        na++;\n        break;\n    }\n\n  });\n\n  let results = [[preManufactured, manufactured, inStorage, inTransit, offloadedOnsite, installedOnsite], dateDataset];\n\n  return results;\n}\n\n\nconst labels = ['Pre-manufactured', 'Manufactured',  'In Storage','In Transit', 'Offloaded onsite', 'Installed onsite'];\n\nconst Dashboard = (props) => {\n  const dispatch = useDispatch();\n  const [modelId, setModelId] = useState(null);\n  const [projecti, setProject] = useState({});\n  const [projectsWithModel, setProjectsWithModels] = useState([]);\n  const [projectModal, setProjectModal] = useState(false);\n  const [assets, setAssets] = useState([]);\n  const history = useHistory();\n  const categories = useSelector(state => state.assetCategory.assetCategories);\n  const projects = useSelector(state => state.project.projects);\n  const datapoints = useSelector(state => state.assetField.assetFields);\n  const loggedInUser = useSelector(state => state.auth.user);\n  const users = useSelector(state => state.user.users);\n  const [update, setUpdated] = useState(false);\n  const [selectedOption, setSelected] = useState(null);\n\n   \n  const data = {\n    labels: labels,\n    datasets: [{\n      label: projecti ? projecti.title : 'Model 1',\n      data: assets && assets.length > 0 ? formatChartData(assets)[0]  : [],\n      backgroundColor: [\n        'rgba(255, 205, 86, 0.7)',\n        'rgba(255, 159, 64, 0.7)',\n        'rgba(255, 0, 0, 0.7)',\n        'rgba(139, 0, 139, 0.7)',\n        'rgba(50, 205, 50, 0.7)',\n        'rgba(0, 100, 0, 0.7)',\n      ],\n      borderColor: [\n        'rgb(255, 205, 86)',\n        'rgb(255, 159, 64)',\n        'rgb(255, 0, 0)',\n        'rgb(139, 0, 139)',\n        'rgb(50, 205, 50)',\n        'rgb(0, 100, 0)',\n      ],\n      borderWidth: 1\n    }]\n  };\n  const options = {\n    responsive: true,\n    onClick: function(evt, element) {\n      if(element.length > 0)\n      {\n        history.push(`/project/model/${projecti.model.id}/assets`);\n        }\n    },\n  };\n\n  const data2 = {\n    labels: [\n      'Pre-manufactured',\n      'Manufactured',\n      'In Storage',\n      'In Transit',\n      'Offloaded on site',\n      'Installed on site'\n    ],\n      datasets: [ \n      {\n        label: \"In Time\",\n        backgroundColor: \"rgba(73,181,255)\",\n        borderColor: \"rgba(73,181,255,1)\",\n        borderWidth: 1,\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n        hoverBorderColor: \"rgba(255,99,132,1)\",\n        data: assets && assets.length > 0 ? Object.values(formatChartData(assets)[1]).map(item => item.inTime): []\n      },\n\n      {\n        label: \"Due Soon (< 7 days)\",\n        backgroundColor: \"rgba(231,159,93)\",\n        borderColor: \"rgb(255,203,95)\",\n        borderWidth: 1,\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n        hoverBorderColor: \"rgba(255,99,132,1)\",\n        data: assets && assets.length > 0 ? Object.values(formatChartData(assets)[1]).map(item => item.dueSoon): []\n      },\n        {\n          label: \"Past Due Date\",\n          backgroundColor: \"rgb(231,110,110)\",\n          borderColor: \"rgba(231,110,110,1)\",\n          borderWidth: 1,\n          hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n          hoverBorderColor: \"rgba(255,99,132,1)\",\n          data: assets && assets.length > 0 ? Object.values(formatChartData(assets)[1]).map(item => item.pastDueDate): []\n        },\n        \n    ],\n    \n  }\n  const options2 = {\n    responsive: true,\n    legend: {\n      display: true\n    },\n    events: ['click'],\n    scales: {\n        xAxes: [{\n          minBarLength: 2,\n          grid: {\n            offset: true\n          }\n         \n        }\n      ]\n    }\n\n  };\n\n  const getCircularReplacer = () => {\n    const seen = new WeakSet();\n    return (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) {\n          return;\n        }\n        seen.add(value);\n      }\n      return value;\n    };\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(async() => {\n\n    const projectsWithModel = projects && projects.length > 0 ? projects.filter (item => item.model !== null): [];\n    setProjectsWithModels(projectsWithModel)\n  \n    if(projects && projects.length > 0 && modelId === null){\n      const getmodelProject = projects.find(proj =>  proj.model !== null )\n      const assetsData = (await dispatch(getModelAssetsData(getmodelProject.model.id))).data\n      setProject(getmodelProject);\n      if(assetsData && assetsData.length > 0){\n        setAssets(assetsData)\n      }else{\n        setAssets([])\n      }\n    } \n    else if(projects && projects.length >0 && modelId !== null){\n       const getmodelProject = projectsWithModel.find(proj => proj.model.id === parseInt(modelId));\n       setProject(getmodelProject);\n       const assetsData = (await dispatch(getModelAssetsData(modelId))).data;\n       setAssets(assetsData);\n    } else{\n     return\n    }\n  },[dispatch,projects, modelId]);\n\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    setModelId(event.target.value);\n    \n  }\n\n \n\n  return (\n    <>\n     <CRow>\n       {/* <CCol xs=\"6\" lg={loggedInUser.role=== 'admin'? '3': '4'} className=\"h-50\">\n         <CCard accentColor=\"primary\" textColor=\"primary\">\n           <CCardBody>\n             <CRow style={{textAlign:\"center\"}}>\n               <CCol lg=\"3\" md=\"3\" sm=\"12\"> <FontAwesomeIcon icon={faBuilding} size=\"2x\" /></CCol>\n               <CCol lg=\"9\" md=\"9\" sm=\"12\"> <span className=\"text-lg text-lg-center\"> {projects ? projects.length: 'Loading...'} </span>\n                 <span className=\"d-block text-uppercase text-muted font-weight-bold text-sm-start\">Projects</span></CCol>\n             </CRow>\n\n           </CCardBody>\n         </CCard>\n       </CCol>\n       <CCol xs=\"6\" lg={loggedInUser.role=== 'admin'? '3': '4'} className=\"h-50\">\n         <CCard accentColor=\"info\" textColor=\"info\">\n           <CCardBody>\n           <CRow style={{textAlign:\"center\"}}>\n             <CCol lg=\"3\" md=\"3\" sm=\"12\"><FontAwesomeIcon icon={faTh} size=\"2x\"/> </CCol>\n             <CCol lg=\"9\" md=\"9\" sm=\"12\">\n                 <span className=\"text-lg text-lg-center\"> {categories ? categories.length : 'Loading...'} </span>\n                 <span className=\"d-block text-uppercase text-muted font-weight-bold text-sm-start\"> Asset Categories</span>\n             </CCol>\n           </CRow>\n           </CCardBody>\n         </CCard>\n       </CCol>\n       <CCol xs=\"6\" lg={loggedInUser.role=== 'admin'? '3': '4'}>\n       <CCard accentColor=\"success\" textColor=\"success\">\n         <CCardBody>\n           <CRow style={{textAlign:\"center\"}}>\n             <CCol lg=\"3\" md=\"3\" sm=\"12\"><FontAwesomeIcon icon={faThList} size=\"2x\"/></CCol>\n             <CCol lg=\"9\" md=\"9\" sm=\"12\">\n               <span className=\"text-lg text-lg-center\"> {datapoints ? datapoints.length : 'Loading...'} </span>\n               <span className=\"d-block text-uppercase text-muted font-weight-bold text-sm-start\"> Asset Fields</span>\n             </CCol>\n           </CRow>\n         </CCardBody>\n       </CCard>\n     </CCol> */}\n       {/* {loggedInUser && loggedInUser.role === 'admin' ? <CCol xs=\"6\" lg=\"3\">\n         <CCard accentColor=\"danger\" textColor=\"danger\">\n           <CCardBody>\n             <CRow style={{textAlign:\"center\"}}>\n             <CCol lg=\"3\" md=\"3\" sm=\"12\"> <FontAwesomeIcon icon={faUsers} size=\"2x\"/></CCol>\n             <CCol lg=\"9\" md=\"9\" sm=\"12\">\n                 <span className=\"text-lg text-lg-center\"> {users ? users.length : 'Loading...'} </span>\n                 <span className=\"d-block text-uppercase text-muted font-weight-bold text-sm-start\"> Users</span>\n             </CCol>\n            </CRow>\n           </CCardBody>\n         </CCard>\n       </CCol>: null } */}\n     </CRow>\n    </>\n  )\n}\n\n\nexport default Dashboard;\n"],"sourceRoot":""}