{"version":3,"sources":["views/pages/changePassword/changePassword.js"],"names":["schema","formerPassword","presence","allowEmpty","message","length","maximum","newPassword","minimum","confirmPassword","equality","ChangePassword","props","dispatch","useDispatch","useState","inputType","useSelector","state","auth","user","isValid","values","touched","errors","formState","setFormState","hasError","field","handleChange","event","persist","target","name","type","checked","value","useEffect","validate","xs","xl","className","size","onSubmit","preventDefault","changePassword","placeholder","autoComplete","onChange","disabled"],"mappings":"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","file":"static/js/26.febc3beb.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow, CSwitch, CSpinner, CForm, CInputGroup, CInputGroupPrepend, CInputGroupText, CInput, CButton, CFormText\n} from '@coreui/react'\nimport {changePassword} from \"../../../actions/authActions\";\nimport CIcon from \"@coreui/icons-react\";\nimport validate from \"validate.js\";\n\nconst schema = {\n  formerPassword:  {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n  newPassword: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      minimum: 6,\n      maximum: 32\n    }\n  },\n  confirmPassword: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32,\n      minimum: 6,\n      message: \"must be at least 6 characters\"\n    },\n    equality: 'newPassword'\n  }\n}\n\n\nconst ChangePassword = (props) => {\n  const dispatch = useDispatch();\n  const [inputType, setInputType] = useState('password')\n  const loggedInUser = useSelector(state => state.auth.user);\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const hasError = field =>\n    formState.touched[field] && formState.errors[field] ? true : false;\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value,\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true\n      }\n    }));\n\n  };\n\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChangePassword = (event) => {\n    event.preventDefault();\n    if(formState.isValid) {\n      dispatch(changePassword(formState.values))\n    }\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n  }\n\n  return (\n\n    <CRow>\n\n        <CCol xs=\"12\" xl=\"6\" className=\"align-content-center m-auto\">\n          <CCard className=\"card-accent-dark shadow-lg\" size=\"lg\">\n            <CCardHeader className=\"text-center\">\n              <div className=\"d-block my-3\">\n                Change Password\n              </div>\n            </CCardHeader>\n            <CCardBody className=\"text-center\">\n              <CForm onSubmit={handleChangePassword}>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupPrepend>\n                    <CInputGroupText>\n                      <CIcon name=\"cil-lock-locked\" />\n                    </CInputGroupText>\n                  </CInputGroupPrepend>\n                  <CInput type={inputType} name=\"formerPassword\" placeholder=\"Current Password\" autoComplete=\"current-password\" onChange={handleChange} value={formState.formerPassword} />\n                  <CFormText className=\"help-block\"> {hasError('formerPassword') ? formState.errors.formerPassword[0] : null} </CFormText>\n                </CInputGroup>\n                <CInputGroup className=\"mb-4\">\n                  <CInputGroupPrepend>\n                    <CInputGroupText>\n                      <CIcon name=\"cil-lock-locked\" />\n                    </CInputGroupText>\n                  </CInputGroupPrepend>\n                  <CInput type={inputType} name=\"newPassword\" placeholder=\"New Password\" autoComplete=\"new-password\"  onChange={handleChange} value={formState.newPassword}/>\n                  <CFormText className=\"help-block\"> {hasError('newPassword') ? formState.errors.newPassword[0] : null} </CFormText>\n                </CInputGroup>\n                <CInputGroup className=\"mb-4\">\n                  <CInputGroupPrepend>\n                    <CInputGroupText>\n                      <CIcon name=\"cil-lock-locked\" />\n                    </CInputGroupText>\n                  </CInputGroupPrepend>\n                  <CInput type={inputType} name=\"confirmPassword\" placeholder=\"Confirm Password\" autoComplete=\"confirm-password\"  onChange={handleChange} value={formState.confirmPassword}/>\n                  <div><CFormText className=\"d-block help-block\"> {hasError('confirmPassword') ? formState.errors.confirmPassword[0] : null} </CFormText></div>\n                </CInputGroup>\n                <CRow>\n                  <CCol xs=\"12\">\n                    <CButton type=\"submit\" className=\"px-4 sidebar-dark text-white\" disabled={!formState.isValid}>Submit</CButton>\n                  </CCol>\n                </CRow>\n              </CForm>\n\n            </CCardBody>\n          </CCard>\n        </CCol>\n\n    </CRow>\n\n\n  )\n}\n\nexport default ChangePassword\n"],"sourceRoot":""}