{"version":3,"sources":["views/pages/assetDataPoint/AssetDataPoint.js"],"names":["schema","title","presence","allowEmpty","message","length","maximum","category","type","AssetDataPoint","dispatch","useDispatch","datapoints","useSelector","state","assetField","assetFields","categories","assetCategory","assetCategories","useState","modal","setModal","editModal","setEditModal","deleteModal","setDeleteModal","datapoint","setDatapoint","isValid","values","touched","errors","formState","setFormState","loggedInUser","auth","user","useEffect","validate","hasError","field","handleChange","event","persist","target","name","checked","value","dataForm","handleSubmit","className","onSubmit","row","md","htmlFor","xs","id","placeholder","onChange","required","custom","autoComplete","map","color","onClick","lg","role","variant","active","show","onClose","closeButton","preventDefault","createAssetField","items","fields","itemsPerPage","pagination","tableFilter","sorter","hover","scopedSlots","item","customClasses","deleteAssetField","updateAssetField"],"mappings":"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","file":"static/js/25.1d4b9fde.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CForm,\n  CFormGroup,\n  CFormText,\n  CInput,\n  CLabel,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow, CSelect\n} from '@coreui/react'\n\nimport CIcon from \"@coreui/icons-react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport validate from \"validate.js\";\nimport {createAssetField, deleteAssetField, updateAssetField} from \"../../../actions/assetActions\";\n\n\n\nconst schema = {\n  title: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n  category: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n  type: {\n    presence: {allowEmpty: false, message: 'is required'},\n    length: {\n      maximum: 32\n    }\n  },\n}\n\n\n\nconst AssetDataPoint = () => {\n\n  const dispatch = useDispatch();\n  const datapoints = useSelector(state => state.assetField.assetFields);\n  const categories = useSelector(state => state.assetCategory.assetCategories);\n\n  const [modal, setModal] = useState(false);\n  const [editModal, setEditModal] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [datapoint, setDatapoint] = useState({});\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const loggedInUser = useSelector(state => state.auth.user);\n  const fields = ['title', 'category', 'type'];\n  const adminFields = ['title', 'category', 'type', 'actions'];\n\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const hasError = field =>\n    formState.touched[field] && formState.errors[field] ? true : false;\n\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value,\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true\n      }\n    }));\n\n  };\n  const handleAddField = event => {\n    event.preventDefault();\n    if (formState.isValid){\n      dispatch(createAssetField(formState.values));\n    }\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n    setModal(false);\n    return false;\n  }\n\n  const handleDeleteField = () => {\n    // event.preventDefault();\n    dispatch(deleteAssetField(datapoint.id));\n    setDatapoint({});\n    setDeleteModal(false);\n  }\n\n  const handleEditField = event => {\n    event.preventDefault();\n    dispatch(updateAssetField(datapoint.id, formState.values));\n    setDatapoint({});\n    setFormState({\n      isValid: false,\n      values: {},\n      touched: {},\n      errors: {}\n    });\n    setEditModal(false);\n  }\n\n  const openDeleteModal =(field) => {\n    setDeleteModal(true);\n    setDatapoint(field);\n  }\n\n  const openEditModal =(field) => {\n    setEditModal(true);\n    setFormState({\n      isValid: true,\n      values: field,\n      touched: {},\n      errors: {}\n    });\n    setDatapoint(field);\n  }\n\n\n  const dataForm = (handleSubmit, type) => {\n    return ( <CForm className=\"form-horizontal\" onSubmit={handleSubmit}>\n      <CModalBody>\n        <CFormGroup row>\n          <CCol md=\"3\">\n            <CLabel htmlFor=\"hf-email\">Name</CLabel>\n          </CCol>\n          <CCol xs=\"12\" md=\"9\">\n            <CInput type=\"text\" id=\"title\" name=\"title\" placeholder=\"Enter data point name...\" onChange={handleChange} value={formState.values.title || ''} required />\n            <CFormText className=\"help-block\">{hasError('title') ? formState.errors.title[0] : \"Please enter the name\"}</CFormText>\n          </CCol>\n        </CFormGroup>\n        <CFormGroup row>\n          <CCol md=\"3\">\n            <CLabel htmlFor=\"category\">Category</CLabel>\n          </CCol>\n          <CCol xs=\"12\" md=\"9\">\n            <CSelect\n              custom\n              name=\"category\"\n              id=\"category\"\n              autoComplete=\"category\"\n              onChange={handleChange}\n              value={formState.values.category || ''}\n              required\n            >\n              <option value=\"\">Please select</option>\n              {categories && categories.length > 0 ? categories.map(category =>\n                <option value={category.title} key={category.id}>{category.title}</option>\n              ) : ''}\n            </CSelect>\n            <CFormText className=\"help-block\">{hasError('category') ? formState.errors.category[0] : \"Select category\"}</CFormText>\n          </CCol>\n        </CFormGroup>\n        <CFormGroup row>\n          <CCol md=\"3\">\n            <CLabel htmlFor=\"type\">Data Type</CLabel>\n          </CCol>\n          <CCol xs=\"12\" md=\"9\">\n            <CSelect\n              custom\n              name=\"type\"\n              id=\"type\"\n              autoComplete=\"type\"\n              onChange={handleChange}\n              value={formState.values.type || ''}\n              required\n            >\n              <option value=\"\">Please select</option>\n              <option value=\"string\">String</option>\n              <option value=\"number\">Number</option>\n              <option value=\"url\">URL</option>\n              <option value=\"date\">Date</option>\n            </CSelect>\n            <CFormText className=\"help-block\">{hasError('type') ? formState.errors.type[0] : \"Select data type\"}</CFormText>\n          </CCol>\n        </CFormGroup>\n      </CModalBody>\n      <CModalFooter>\n        <CButton  className=\"sidebar-dark text-white\" type=\"submit\">Submit</CButton>{' '}\n        <CButton\n          color=\"secondary\"\n          onClick={() =>  { type == 'edit' ? setEditModal(false) : setModal(false)}}\n        >Cancel</CButton>\n      </CModalFooter>\n    </CForm>)\n  }\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard className=\"shadow-lg\">\n            <CCardHeader>\n              Asset Data Fields\n              {loggedInUser && loggedInUser.role === 'admin' ? <CButton variant=\"outline\" active aria-pressed=\"true\" className=\"float-right sidebar-dark text-white\" onClick={() => setModal(!modal)} >\n                  Add New Datapoint\n                </CButton>: null}\n            </CCardHeader>\n            <CModal\n              show={modal}\n              onClose={setModal}\n            >\n              <CModalHeader closeButton>\n                <CModalTitle>New Datapoint</CModalTitle>\n              </CModalHeader>\n            {dataForm(handleAddField, \"add\")}\n            </CModal>\n            <CCardBody>\n              {datapoints ?\n                (<CDataTable\n                items={datapoints}\n                fields={loggedInUser && loggedInUser.role === 'admin' ?adminFields: fields}\n                itemsPerPage={10}\n                pagination\n                tableFilter\n                sorter\n                hover\n                scopedSlots = {{\n                  'actions':\n                    (item)=>(\n                     <td className=\"px-4\">\n                        <CButton className=\"pl-6\" onClick={() => openEditModal(item)} color=\"primary\" variant=\"ghost\"><CIcon name=\"cil-pencil\" color=\"primary\" customClasses=\"c-sidebar-nav-icon\" /></CButton>\n                        <CButton className=\"pl-6\"  onClick={() => openDeleteModal(item)} color=\"danger\" variant=\"ghost\"><CIcon name=\"cil-trash\" customClasses=\"c-sidebar-nav-icon\"/></CButton>\n                      </td>\n                    )\n                }}\n              />) : <div>Loading..</div>}\n            </CCardBody>\n            <CModal\n              show={deleteModal}\n              onClose={setDeleteModal}\n            >\n              <CModalHeader closeButton> Confirm</CModalHeader>\n              <CModalBody>Are you sure you want to delete this asset category? </CModalBody>\n              <CModalFooter>\n                <CButton className=\"text-white bg-danger\" type=\"submit\" onClick={handleDeleteField}>Yes</CButton>{' '}\n                <CButton\n                  color=\"secondary\"\n                  onClick={() =>  setDeleteModal(false)}\n                >Cancel</CButton>\n              </CModalFooter>\n            </CModal>\n            <CModal\n              show={editModal}\n              onClose={setEditModal}\n            >\n              <CModalHeader closeButton> Confirm</CModalHeader>\n              {dataForm(handleEditField, \"edit\")}\n            </CModal>\n          </CCard>\n        </CCol>\n\n      </CRow>\n\n\n    </>\n  )\n}\n\nexport default AssetDataPoint;\n"],"sourceRoot":""}